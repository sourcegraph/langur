static DISAMBIGUATIONS: phf::Map<&'static str, &'static [Rule]> =
::phf::Map {
    key: 15467950696543387533,
    disps: &[
        (0, 6),
        (0, 4),
        (0, 49),
        (0, 1),
        (0, 9),
        (0, 130),
        (1, 49),
        (0, 51),
        (5, 85),
        (2, 5),
        (0, 29),
        (10, 46),
        (3, 47),
        (5, 124),
        (0, 0),
        (1, 0),
        (0, 102),
        (3, 75),
        (1, 0),
        (13, 129),
        (1, 71),
        (0, 35),
        (7, 35),
        (0, 20),
        (0, 41),
        (0, 21),
        (7, 33),
    ],
    entries: &[
        (".srt", &[Rule { languages: &[ids::SubRip_Text, ], pattern: Some(Pattern::Positive("^(\\d{2}:\\d{2}:\\d{2},\\d{3})\\s*(-->)\\s*(\\d{2}:\\d{2}:\\d{2},\\d{3})$"))},]),
        (".3", &[Rule { languages: &[ids::Roff_Manpage, ], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*Dd +(?:[^\"\\s]+|\"[^\"]+\")"),Pattern::Positive("^[.'][ \\t]*Dt +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*Sh +(?:[^\"\\s]|\"[^\"]+\")"),]))},Rule { languages: &[ids::Roff_Manpage, ], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*TH +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*SH +(?:[^\"\\s]+|\"[^\"\\s]+)"),]))},Rule { languages: &[ids::Roff, ], pattern: Some(Pattern::Positive("^\\.(?:[A-Za-z]{2}(?:\\s|$)|\\\\\")"))},]),
        (".mojo", &[Rule { languages: &[ids::Mojo, ], pattern: Some(Pattern::Positive("^\\s*(alias|def|from|fn|import|struct|trait)\\s"))},Rule { languages: &[ids::XML, ], pattern: Some(Pattern::Positive("^\\s*<\\?xml"))},]),
        (".sql", &[Rule { languages: &[ids::PLpgSQL, ], pattern: Some(Pattern::Positive("(?i:^\\\\i\\b|AS\\s+\\$\\$|LANGUAGE\\s+'?plpgsql'?|BEGIN(\\s+WORK)?\\s*;)"))},Rule { languages: &[ids::SQLPL, ], pattern: Some(Pattern::Positive("(?i:ALTER\\s+MODULE|MODE\\s+DB2SQL|\\bSYS(CAT|PROC)\\.|ASSOCIATE\\s+RESULT\\s+SET|\\bEND!\\s*$)"))},Rule { languages: &[ids::PLSQL, ], pattern: Some(Pattern::Positive("(?i:\\$\\$PLSQL_|XMLTYPE|systimestamp|\\.nextval|CONNECT\\s+BY|AUTHID\\s+(DEFINER|CURRENT_USER)|constructor\\W+function)"))},Rule { languages: &[ids::TSQL, ], pattern: Some(Pattern::Positive("(?i:^\\s*GO\\b|BEGIN(\\s+TRY|\\s+CATCH)|OUTPUT\\s+INSERTED|DECLARE\\s+@|\\[dbo\\])"))},Rule { languages: &[ids::SQL, ], pattern: None},]),
        (".ecl", &[Rule { languages: &[ids::ECLiPSe, ], pattern: Some(Pattern::Positive("^[^#]+:-"))},Rule { languages: &[ids::ECL, ], pattern: Some(Pattern::Positive(":="))},]),
        (".rpy", &[Rule { languages: &[ids::Python, ], pattern: Some(Pattern::Positive("^(import|from|class|def)\\s"))},Rule { languages: &[ids::Ren_Py, ], pattern: None},]),
        (".fr", &[Rule { languages: &[ids::Forth, ], pattern: Some(Pattern::Positive("^(: |also |new-device|previous )"))},Rule { languages: &[ids::Frege, ], pattern: Some(Pattern::Positive("^\\s*(import|module|package|data|type) "))},Rule { languages: &[ids::Text, ], pattern: None},]),
        (".3p", &[Rule { languages: &[ids::Roff_Manpage, ], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*Dd +(?:[^\"\\s]+|\"[^\"]+\")"),Pattern::Positive("^[.'][ \\t]*Dt +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*Sh +(?:[^\"\\s]|\"[^\"]+\")"),]))},Rule { languages: &[ids::Roff_Manpage, ], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*TH +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*SH +(?:[^\"\\s]+|\"[^\"\\s]+)"),]))},Rule { languages: &[ids::Roff, ], pattern: None},]),
        (".t", &[Rule { languages: &[ids::Perl, ], pattern: Some(Pattern::And(&[Pattern::Negative("^\\s*use\\s+v6\\b"),Pattern::Or(&[Pattern::Positive("\\buse\\s+(?:strict\\b|v?5\\b)"),Pattern::Positive("^\\s*use\\s+(?:constant|overload)\\b"),Pattern::Positive("^\\s*(?:\\*|(?:our\\s*)?@)EXPORT\\s*="),Pattern::Positive("^\\s*package\\s+[^\\W\\d]\\w*(?:::\\w+)*\\s*(?:[;{]|\\sv?\\d)"),Pattern::Positive("[\\s$][^\\W\\d]\\w*(?::\\w+)*->[a-zA-Z_\\[({]"),]),]))},Rule { languages: &[ids::Raku, ], pattern: Some(Pattern::Positive("^\\s*(?:use\\s+v6\\b|\\bmodule\\b|\\bmy\\s+class\\b)"))},Rule { languages: &[ids::Turing, ], pattern: Some(Pattern::Positive("^\\s*%[ \\t]+|^\\s*var\\s+\\w+(\\s*:\\s*\\w+)?\\s*:=\\s*\\w+"))},]),
        (".plt", &[Rule { languages: &[ids::Prolog, ], pattern: Some(Pattern::Positive("^\\s*:-"))},]),
        (".sol", &[Rule { languages: &[ids::Solidity, ], pattern: Some(Pattern::Positive("\\bpragma\\s+solidity\\b|\\b(?:abstract\\s+)?contract\\s+(?!\\d)[a-zA-Z0-9$_]+(?:\\s+is\\s+(?:[a-zA-Z0-9$_][^\\{]*?)?)?\\s*\\{"))},Rule { languages: &[ids::Gerber_Image, ], pattern: Some(Pattern::Positive("^[DGMT][0-9]{2}\\*(?:\\r?\\n|\\r)"))},]),
        (".as", &[Rule { languages: &[ids::ActionScript, ], pattern: Some(Pattern::Positive("^\\s*(?:package(?:\\s+[\\w.]+)?\\s+(?:\\{|$)|import\\s+[\\w.*]+\\s*;|(?=.*?(?:intrinsic|extends))(intrinsic\\s+)?class\\s+[\\w<>.]+(?:\\s+extends\\s+[\\w<>.]+)?|(?:(?:public|protected|private|static)\\s+)*(?:(?:var|const|local)\\s+\\w+\\s*:\\s*[\\w<>.]+(?:\\s*=.*)?\\s*;|function\\s+\\w+\\s*\\((?:\\s*\\w+\\s*:\\s*[\\w<>.]+\\s*(,\\s*\\w+\\s*:\\s*[\\w<>.]+\\s*)*)?\\)))"))},]),
        (".q", &[Rule { languages: &[ids::q, ], pattern: Some(Pattern::Positive("((?i:[A-Z.][\\w.]*:\\{)|^\\\\(cd?|d|l|p|ts?) )"))},Rule { languages: &[ids::HiveQL, ], pattern: Some(Pattern::Positive("(?i:SELECT\\s+[\\w*,]+\\s+FROM|(CREATE|ALTER|DROP)\\s(DATABASE|SCHEMA|TABLE))"))},]),
        (".r", &[Rule { languages: &[ids::Rebol, ], pattern: Some(Pattern::Positive("(?i:\\bRebol\\b)"))},Rule { languages: &[ids::Rez, ], pattern: Some(Pattern::Positive("(#include\\s+[\"<](Types\\.r|Carbon\\/Carbon\\.r)[\">])|((resource|data|type)\\s+'[A-Za-z0-9]{4}'\\s+((\\(.*\\)\\s+){0,1}){)"))},Rule { languages: &[ids::R, ], pattern: Some(Pattern::Positive("<-|^\\s*#"))},]),
        (".res", &[Rule { languages: &[ids::ReScript, ], pattern: Some(Pattern::Or(&[Pattern::Positive("^\\s*(let|module|type)\\s+\\w*\\s+=\\s+"),Pattern::Positive("^\\s*(?:include|open)\\s+\\w+\\s*$"),]))},]),
        (".cmp", &[Rule { languages: &[ids::Gerber_Image, ], pattern: Some(Pattern::Positive("^[DGMT][0-9]{2}\\*(?:\\r?\\n|\\r)"))},]),
        (".rs", &[Rule { languages: &[ids::Rust, ], pattern: Some(Pattern::Positive("^(use |fn |mod |pub |macro_rules|impl|#!?\\[)"))},Rule { languages: &[ids::RenderScript, ], pattern: Some(Pattern::Positive("#include|#pragma\\s+(rs|version)|__attribute__"))},Rule { languages: &[ids::XML, ], pattern: Some(Pattern::Positive("^\\s*<\\?xml"))},]),
        (".pod", &[Rule { languages: &[ids::Pod_6, ], pattern: Some(Pattern::Positive("^[\\s&&[^\\r\\n]]*=(comment|begin pod|begin para|item\\d+)"))},Rule { languages: &[ids::Pod, ], pattern: None},]),
        (".5", &[Rule { languages: &[ids::Roff_Manpage, ], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*Dd +(?:[^\"\\s]+|\"[^\"]+\")"),Pattern::Positive("^[.'][ \\t]*Dt +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*Sh +(?:[^\"\\s]|\"[^\"]+\")"),]))},Rule { languages: &[ids::Roff_Manpage, ], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*TH +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*SH +(?:[^\"\\s]+|\"[^\"\\s]+)"),]))},Rule { languages: &[ids::Roff, ], pattern: Some(Pattern::Positive("^\\.(?:[A-Za-z]{2}(?:\\s|$)|\\\\\")"))},]),
        (".mdoc", &[Rule { languages: &[ids::Roff_Manpage, ], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*Dd +(?:[^\"\\s]+|\"[^\"]+\")"),Pattern::Positive("^[.'][ \\t]*Dt +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*Sh +(?:[^\"\\s]|\"[^\"]+\")"),]))},Rule { languages: &[ids::Roff_Manpage, ], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*TH +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*SH +(?:[^\"\\s]+|\"[^\"\\s]+)"),]))},Rule { languages: &[ids::Roff, ], pattern: None},]),
        (".man", &[Rule { languages: &[ids::Roff_Manpage, ], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*Dd +(?:[^\"\\s]+|\"[^\"]+\")"),Pattern::Positive("^[.'][ \\t]*Dt +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*Sh +(?:[^\"\\s]|\"[^\"]+\")"),]))},Rule { languages: &[ids::Roff_Manpage, ], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*TH +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*SH +(?:[^\"\\s]+|\"[^\"\\s]+)"),]))},Rule { languages: &[ids::Roff, ], pattern: None},]),
        (".app", &[Rule { languages: &[ids::Erlang, ], pattern: Some(Pattern::Positive("^\\{\\s*(?:application|'application')\\s*,\\s*(?:[a-z]+[\\w@]*|'[^']+')\\s*,\\s*\\[(?:.|[\\r\\n])*\\]\\s*\\}\\.[ \\t]*$"))},]),
        (".2", &[Rule { languages: &[ids::Roff_Manpage, ], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*Dd +(?:[^\"\\s]+|\"[^\"]+\")"),Pattern::Positive("^[.'][ \\t]*Dt +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*Sh +(?:[^\"\\s]|\"[^\"]+\")"),]))},Rule { languages: &[ids::Roff_Manpage, ], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*TH +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*SH +(?:[^\"\\s]+|\"[^\"\\s]+)"),]))},Rule { languages: &[ids::Roff, ], pattern: Some(Pattern::Positive("^\\.(?:[A-Za-z]{2}(?:\\s|$)|\\\\\")"))},]),
        (".3in", &[Rule { languages: &[ids::Roff_Manpage, ], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*Dd +(?:[^\"\\s]+|\"[^\"]+\")"),Pattern::Positive("^[.'][ \\t]*Dt +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*Sh +(?:[^\"\\s]|\"[^\"]+\")"),]))},Rule { languages: &[ids::Roff_Manpage, ], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*TH +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*SH +(?:[^\"\\s]+|\"[^\"\\s]+)"),]))},Rule { languages: &[ids::Roff, ], pattern: None},]),
        (".builds", &[Rule { languages: &[ids::XML, ], pattern: Some(Pattern::Positive("^(\\s*)(?i:<Project|<Import|<Property|<?xml|xmlns)"))},]),
        (".vba", &[Rule { languages: &[ids::Vim_Script, ], pattern: Some(Pattern::Positive("^UseVimball"))},Rule { languages: &[ids::VBA, ], pattern: None},]),
        (".stl", &[Rule { languages: &[ids::STL, ], pattern: Some(Pattern::Positive("\\A\\s*solid(?:$|\\s)[\\s\\S]*^endsolid(?:$|\\s)"))},]),
        (".scd", &[Rule { languages: &[ids::SuperCollider, ], pattern: Some(Pattern::Positive("(?i:\\^(this|super)\\.|^\\s*(~\\w+\\s*=\\.|SynthDef\\b))"))},Rule { languages: &[ids::Markdown, ], pattern: Some(Pattern::Positive("^#+\\s+(NAME|SYNOPSIS|DESCRIPTION)"))},]),
        (".for", &[Rule { languages: &[ids::Forth, ], pattern: Some(Pattern::Positive("^: "))},Rule { languages: &[ids::Fortran, ], pattern: Some(Pattern::Positive("^(?i:[c*][^abd-z]|      (subroutine|program|end|data)\\s|\\s*!)"))},]),
        (".4", &[Rule { languages: &[ids::Roff_Manpage, ], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*Dd +(?:[^\"\\s]+|\"[^\"]+\")"),Pattern::Positive("^[.'][ \\t]*Dt +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*Sh +(?:[^\"\\s]|\"[^\"]+\")"),]))},Rule { languages: &[ids::Roff_Manpage, ], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*TH +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*SH +(?:[^\"\\s]+|\"[^\"\\s]+)"),]))},Rule { languages: &[ids::Roff, ], pattern: Some(Pattern::Positive("^\\.(?:[A-Za-z]{2}(?:\\s|$)|\\\\\")"))},]),
        (".cairo", &[Rule { languages: &[ids::Cairo_Zero, ], pattern: Some(Pattern::Positive("(^(\\s*)%lang(\\s+)([A-Za-z0-9_]+))|(^(\\s*)%builtins(\\s+)([A-Za-z0-9_]+\\s*)*$)|(^(\\s*)from(\\s+)starkware\\.(cairo|starknet)\\.([A-Za-z0-9_.\\s]+?)import)|(,\\s*ap\\+\\+;$)|(;\\s*ap\\+\\+$)"))},Rule { languages: &[ids::Cairo, ], pattern: None},]),
        (".9", &[Rule { languages: &[ids::Roff_Manpage, ], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*Dd +(?:[^\"\\s]+|\"[^\"]+\")"),Pattern::Positive("^[.'][ \\t]*Dt +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*Sh +(?:[^\"\\s]|\"[^\"]+\")"),]))},Rule { languages: &[ids::Roff_Manpage, ], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*TH +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*SH +(?:[^\"\\s]+|\"[^\"\\s]+)"),]))},Rule { languages: &[ids::Roff, ], pattern: Some(Pattern::Positive("^\\.(?:[A-Za-z]{2}(?:\\s|$)|\\\\\")"))},]),
        (".ls", &[Rule { languages: &[ids::LoomScript, ], pattern: Some(Pattern::Positive("^\\s*package\\s*[\\w\\.\\/\\*\\s]*\\s*\\{"))},Rule { languages: &[ids::LiveScript, ], pattern: None},]),
        (".s", &[Rule { languages: &[ids::Motorola_68K_Assembly, ], pattern: Some(Pattern::Or(&[Pattern::Positive("(?im)\\bmoveq(?:\\.l)?\\s+#(?:\\$-?[0-9a-f]{1,3}|%[0-1]{1,8}|-?[0-9]{1,3}),\\s*d[0-7]\\b"),Pattern::Positive("(?im)^\\s*move(?:\\.[bwl])?\\s+(?:sr|usp),\\s*[^\\s]+"),Pattern::Positive("(?im)^\\s*move\\.[bwl]\\s+.*\\b[ad]\\d"),Pattern::Positive("(?im)^\\s*movem\\.[bwl]\\b"),Pattern::Positive("(?im)^\\s*move[mp](?:\\.[wl])?\\b"),Pattern::Positive("(?im)^\\s*btst\\b"),Pattern::Positive("(?im)^\\s*dbra\\b"),]))},]),
        (".asy", &[Rule { languages: &[ids::LTspice_Symbol, ], pattern: Some(Pattern::Positive("^SymbolType[ \\t]"))},Rule { languages: &[ids::Asymptote, ], pattern: None},]),
        (".bi", &[Rule { languages: &[ids::FreeBasic, ], pattern: Some(Pattern::Positive("^[ \\t]*#(?i)(?:define|endif|endmacro|ifn?def|if|include|lang|macro)(?:$|\\s)"))},]),
        (".al", &[Rule { languages: &[ids::AL, ], pattern: Some(Pattern::And(&[Pattern::Positive("\\b(?i:(CODEUNIT|PAGE|PAGEEXTENSION|PAGECUSTOMIZATION|DOTNET|ENUM|ENUMEXTENSION|VALUE|QUERY|REPORT|TABLE|TABLEEXTENSION|XMLPORT|PROFILE|CONTROLADDIN|REPORTEXTENSION|INTERFACE|PERMISSIONSET|PERMISSIONSETEXTENSION|ENTITLEMENT))\\b"),]))},Rule { languages: &[ids::Perl, ], pattern: None},]),
        (".1x", &[Rule { languages: &[ids::Roff_Manpage, ], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*Dd +(?:[^\"\\s]+|\"[^\"]+\")"),Pattern::Positive("^[.'][ \\t]*Dt +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*Sh +(?:[^\"\\s]|\"[^\"]+\")"),]))},Rule { languages: &[ids::Roff_Manpage, ], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*TH +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*SH +(?:[^\"\\s]+|\"[^\"\\s]+)"),]))},Rule { languages: &[ids::Roff, ], pattern: None},]),
        (".bb", &[Rule { languages: &[ids::BlitzBasic, ], pattern: Some(Pattern::Positive("(<^\\s*; |End Function)"))},Rule { languages: &[ids::BitBake, ], pattern: Some(Pattern::Positive("^(# |include|require|inherit)\\b"))},Rule { languages: &[ids::Clojure, ], pattern: Some(Pattern::Positive("\\((def|defn|defmacro|let)\\s"))},]),
        (".pkl", &[Rule { languages: &[ids::Pkl, ], pattern: Some(Pattern::Or(&[Pattern::Positive("^\\s*(module|import|amends|extends|local|const|fixed|abstract|open|class|typealias|@\\w+)\\b"),Pattern::Positive("^\\s*[a-zA-Z0-9_$]+\\s*(=|{|:)|^\\s*`[^`]+`\\s*(=|{|:)|for\\s*\\(|when\\s*\\("),]))},Rule { languages: &[ids::Pickle, ], pattern: None},]),
        (".plist", &[Rule { languages: &[ids::XML_Property_List, ], pattern: Some(Pattern::Positive("^\\s*(?:<\\?xml\\s|<!DOCTYPE\\s+plist|<plist(?:\\s+version\\s*=\\s*[\"']\\d+(?:\\.\\d+)?[\"'])?\\s*>\\s*$)"))},Rule { languages: &[ids::OpenStep_Property_List, ], pattern: None},]),
        (".asc", &[Rule { languages: &[ids::Public_Key, ], pattern: Some(Pattern::Positive("^(----[- ]BEGIN|ssh-(rsa|dss)) "))},Rule { languages: &[ids::AsciiDoc, ], pattern: Some(Pattern::Positive("^[=-]+\\s|\\{\\{[A-Za-z]"))},Rule { languages: &[ids::AGS_Script, ], pattern: Some(Pattern::Positive("^(\\/\\/.+|((import|export)\\s+)?(function|int|float|char)\\s+((room|repeatedly|on|game)_)?([A-Za-z]+[A-Za-z_0-9]+)\\s*[;\\(])"))},]),
        (".ch", &[Rule { languages: &[ids::xBase, ], pattern: Some(Pattern::Positive("^\\s*#\\s*(?i:if|ifdef|ifndef|define|command|xcommand|translate|xtranslate|include|pragma|undef)\\b"))},]),
        (".ice", &[Rule { languages: &[ids::JSON, ], pattern: Some(Pattern::Positive("\\A\\s*[{\\[]"))},Rule { languages: &[ids::Slice, ], pattern: None},]),
        (".mask", &[Rule { languages: &[ids::Unity3D_Asset, ], pattern: Some(Pattern::Positive("tag:unity3d.com"))},]),
        (".frm", &[Rule { languages: &[ids::VBA, ], pattern: Some(Pattern::And(&[Pattern::Positive("^[ ]*VERSION [0-9]\\.[0-9]{2}"),Pattern::Positive("^\\s*Begin\\s+\\{[0-9A-Z\\-]*\\}\\s?"),]))},Rule { languages: &[ids::Visual_Basic_6_0, ], pattern: Some(Pattern::And(&[Pattern::Positive("^[ ]*VERSION [0-9]\\.[0-9]{2}"),Pattern::Positive("^\\s*Begin\\s+VB\\.Form\\s+"),]))},]),
        (".h", &[Rule { languages: &[ids::Objective_C, ], pattern: Some(Pattern::Positive("^\\s*(@(interface|class|protocol|property|end|synchronised|selector|implementation)\\b|#import\\s+.+\\.h[\">])"))},Rule { languages: &[ids::Cpp, ], pattern: Some(Pattern::Or(&[Pattern::Positive("^\\s*#\\s*include <(cstdint|string|vector|map|list|array|bitset|queue|stack|forward_list|unordered_map|unordered_set|(i|o|io)stream)>"),Pattern::Positive("^\\s*template\\s*<"),Pattern::Positive("^[ \\t]*(try|constexpr)"),Pattern::Positive("^[ \\t]*catch\\s*\\("),Pattern::Positive("^[ \\t]*(class|(using[ \\t]+)?namespace)\\s+\\w+"),Pattern::Positive("^[ \\t]*(private|public|protected):$"),Pattern::Positive("__has_cpp_attribute|__cplusplus >"),Pattern::Positive("std::\\w+"),]))},Rule { languages: &[ids::C, ], pattern: None},Rule { languages: &[ids::C, ], pattern: None},]),
        (".ts", &[Rule { languages: &[ids::XML, ], pattern: Some(Pattern::Positive("<TS\\b"))},Rule { languages: &[ids::TypeScript, ], pattern: None},]),
        (".bs", &[Rule { languages: &[ids::Bikeshed, ], pattern: Some(Pattern::Positive("^(?i:<pre\\s+class)\\s*=\\s*('|\\\"|\\b)metadata\\b\\1[^>\\r\\n]*>"))},Rule { languages: &[ids::BrighterScript, ], pattern: Some(Pattern::Or(&[Pattern::Positive("(?i:^\\s*(?=^sub\\s)(?:sub\\s*\\w+\\(.*?\\))|(?::\\s*sub\\(.*?\\))$)"),Pattern::Positive("(?i:^\\s*(end\\ssub)$)"),Pattern::Positive("(?i:^\\s*(?=^function\\s)(?:function\\s*\\w+\\(.*?\\)\\s*as\\s*\\w*)|(?::\\s*function\\(.*?\\)\\s*as\\s*\\w*)$)"),Pattern::Positive("(?i:^\\s*(end\\sfunction)$)"),]))},Rule { languages: &[ids::Bluespec_BH, ], pattern: Some(Pattern::Positive("^package\\s+[A-Za-z_][A-Za-z0-9_']*(?:\\s*\\(|\\s+where)"))},]),
        (".url", &[Rule { languages: &[ids::INI, ], pattern: Some(Pattern::Positive("^\\[InternetShortcut\\](?:\\r?\\n|\\r)(?>[^\\s\\[][^\\r\\n]*(?:\\r?\\n|\\r))*URL="))},]),
        (".yy", &[Rule { languages: &[ids::JSON, ], pattern: Some(Pattern::Positive("\\A\\s*[{\\[]"))},Rule { languages: &[ids::Yacc, ], pattern: None},]),
        (".cl", &[Rule { languages: &[ids::Common_Lisp, ], pattern: Some(Pattern::Positive("^\\s*\\((?i:defun|in-package|defpackage) "))},Rule { languages: &[ids::Cool, ], pattern: Some(Pattern::Positive("^class"))},Rule { languages: &[ids::OpenCL, ], pattern: Some(Pattern::Positive("\\/\\* |\\/\\/ |^\\}"))},]),
        (".lean", &[Rule { languages: &[ids::Lean, ], pattern: Some(Pattern::Positive("^import [a-z]"))},Rule { languages: &[ids::Lean_4, ], pattern: Some(Pattern::Positive("^import [A-Z]"))},]),
        (".e", &[Rule { languages: &[ids::E, ], pattern: Some(Pattern::Or(&[Pattern::Positive("^\\s*(def|var)\\s+(.+):="),Pattern::Positive("^\\s*(def|to)\\s+(\\w+)(\\(.+\\))?\\s+\\{"),Pattern::Positive("^\\s*(when)\\s+(\\(.+\\))\\s+->\\s+\\{"),]))},Rule { languages: &[ids::Eiffel, ], pattern: Some(Pattern::Or(&[Pattern::Positive("^\\s*\\w+\\s*(?:,\\s*\\w+)*[:]\\s*\\w+\\s"),Pattern::Positive("^\\s*\\w+\\s*(?:\\(\\s*\\w+[:][^)]+\\))?(?:[:]\\s*\\w+)?(?:--.+\\s+)*\\s+(?:do|local)\\s"),Pattern::Positive("^\\s*(?:across|deferred|elseif|ensure|feature|from|inherit|inspect|invariant|note|once|require|undefine|variant|when)\\s*$"),]))},Rule { languages: &[ids::Euphoria, ], pattern: Some(Pattern::Or(&[Pattern::Positive("^\\s*namespace\\s"),Pattern::Positive("^\\s*(?:public\\s+)?include\\s"),Pattern::Positive("^\\s*(?:(?:public|export|global)\\s+)?(?:atom|constant|enum|function|integer|object|procedure|sequence|type)\\s"),]))},]),
        (".x", &[Rule { languages: &[ids::DirectX_3D_File, ], pattern: Some(Pattern::Positive("^xof 030(2|3)(?:txt|bin|tzip|bzip)\\b"))},Rule { languages: &[ids::RPC, ], pattern: Some(Pattern::Positive("\\b(program|version)\\s+\\w+\\s*\\{|\\bunion\\s+\\w+\\s+switch\\s*\\("))},Rule { languages: &[ids::Logos, ], pattern: Some(Pattern::Positive("^%(end|ctor|hook|group)\\b"))},Rule { languages: &[ids::Linker_Script, ], pattern: Some(Pattern::Positive("OUTPUT_ARCH\\(|OUTPUT_FORMAT\\(|SECTIONS"))},]),
        (".vcf", &[Rule { languages: &[ids::TSV, ], pattern: Some(Pattern::Positive("\\A##fileformat=VCF"))},Rule { languages: &[ids::vCard, ], pattern: Some(Pattern::Positive("\\ABEGIN:VCARD"))},]),
        (".odin", &[Rule { languages: &[ids::Object_Data_Instance_Notation, ], pattern: Some(Pattern::Positive("(?:^|<)\\s*[A-Za-z0-9_]+\\s*=\\s*<"))},Rule { languages: &[ids::Odin, ], pattern: Some(Pattern::Positive("package\\s+\\w+|\\b(?:im|ex)port\\s*\"[\\w:./]+\"|\\w+\\s*::\\s*(?:proc|struct)\\s*\\(|^\\s*//\\s"))},]),
        (".gsc", &[Rule { languages: &[ids::GSC, ], pattern: Some(Pattern::Or(&[Pattern::Positive("^\\s*#\\s*(?:using|insert|include|define|namespace)[ \\t]+\\w"),Pattern::Positive("^\\s*(?>(?:autoexec|private)\\s+){0,2}function\\s+(?>(?:autoexec|private)\\s+){0,2}\\w+\\s*\\("),Pattern::Positive("\\b(?:level|self)[ \\t]+thread[ \\t]+(?:\\[\\[[ \\t]*(?>\\w+\\.)*\\w+[ \\t]*\\]\\]|\\w+)[ \\t]*\\([^\\r\\n\\)]*\\)[ \\t]*;"),Pattern::Positive("^[ \\t]*#[ \\t]*(?:precache|using_animtree)[ \\t]*\\("),]))},]),
        (".tsx", &[Rule { languages: &[ids::TSX, ], pattern: Some(Pattern::Positive("^\\s*(import.+(from\\s+|require\\()['\"]react|\\/\\/\\/\\s*<reference\\s)"))},Rule { languages: &[ids::XML, ], pattern: Some(Pattern::Positive("(?i:^\\s*<\\?xml\\s+version)"))},]),
        (".typ", &[Rule { languages: &[ids::Typst, ], pattern: Some(Pattern::Positive("^#(import|show|let|set)"))},Rule { languages: &[ids::XML, ], pattern: None},]),
        (".nu", &[Rule { languages: &[ids::Nushell, ], pattern: Some(Pattern::Positive("^\\s*(import|export|module|def|let|let-env) "))},Rule { languages: &[ids::Nu, ], pattern: None},]),
        (".nl", &[Rule { languages: &[ids::NL, ], pattern: Some(Pattern::Positive("^(b|g)[0-9]+ "))},Rule { languages: &[ids::NewLisp, ], pattern: None},]),
        (".w", &[Rule { languages: &[ids::OpenEdge_ABL, ], pattern: Some(Pattern::Positive("&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CUSTOM _DEFINITIONS"))},Rule { languages: &[ids::CWeb, ], pattern: Some(Pattern::Positive("^@(<|\\w+\\.)"))},]),
        (".ms", &[Rule { languages: &[ids::Roff, ], pattern: Some(Pattern::Positive("^[.'][A-Za-z]{2}(\\s|$)"))},Rule { languages: &[ids::Unix_Assembly, ], pattern: Some(Pattern::And(&[Pattern::Negative("/\\*"),Pattern::Positive("^\\s*\\.(?:include\\s|globa?l\\s|[A-Za-z][_A-Za-z0-9]*:)"),]))},Rule { languages: &[ids::MAXScript, ], pattern: None},]),
        (".fs", &[Rule { languages: &[ids::Forth, ], pattern: Some(Pattern::Positive("^(: |new-device)"))},Rule { languages: &[ids::FSharp, ], pattern: Some(Pattern::Positive("^\\s*(#light|import|let|module|namespace|open|type)"))},Rule { languages: &[ids::GLSL, ], pattern: Some(Pattern::Positive("^\\s*(#version|precision|uniform|varying|vec[234])"))},Rule { languages: &[ids::Filterscript, ], pattern: Some(Pattern::Positive("#include|#pragma\\s+(rs|version)|__attribute__"))},]),
        (".gd", &[Rule { languages: &[ids::GAP, ], pattern: Some(Pattern::Positive("\\s*(Declare|BindGlobal|KeyDependentOperation)"))},Rule { languages: &[ids::GDScript, ], pattern: Some(Pattern::Positive("\\s*(extends|var|const|enum|func|class|signal|tool|yield|assert|onready)"))},]),
        (".cs", &[Rule { languages: &[ids::Smalltalk, ], pattern: Some(Pattern::Positive("![\\w\\s]+methodsFor: "))},Rule { languages: &[ids::CSharp, ], pattern: Some(Pattern::Positive("^\\s*(using\\s+[A-Z][\\s\\w.]+;|namespace\\s*[\\w\\.]+\\s*(\\{|;)|\\/\\/)"))},]),
        (".yaml", &[Rule { languages: &[ids::MiniYAML, ], pattern: Some(Pattern::Positive("^\\t+.*?[^\\s:].*?:"))},Rule { languages: &[ids::OASv2_yaml, ], pattern: Some(Pattern::Positive("swagger:\\s?'?\"?2.[0-9.]+'?\"?"))},Rule { languages: &[ids::OASv3_yaml, ], pattern: Some(Pattern::Positive("openapi:\\s?'?\"?3.[0-9.]+'?\"?"))},Rule { languages: &[ids::YAML, ], pattern: None},]),
        (".8", &[Rule { languages: &[ids::Roff_Manpage, ], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*Dd +(?:[^\"\\s]+|\"[^\"]+\")"),Pattern::Positive("^[.'][ \\t]*Dt +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*Sh +(?:[^\"\\s]|\"[^\"]+\")"),]))},Rule { languages: &[ids::Roff_Manpage, ], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*TH +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*SH +(?:[^\"\\s]+|\"[^\"\\s]+)"),]))},Rule { languages: &[ids::Roff, ], pattern: Some(Pattern::Positive("^\\.(?:[A-Za-z]{2}(?:\\s|$)|\\\\\")"))},]),
        (".6", &[Rule { languages: &[ids::Roff_Manpage, ], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*Dd +(?:[^\"\\s]+|\"[^\"]+\")"),Pattern::Positive("^[.'][ \\t]*Dt +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*Sh +(?:[^\"\\s]|\"[^\"]+\")"),]))},Rule { languages: &[ids::Roff_Manpage, ], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*TH +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*SH +(?:[^\"\\s]+|\"[^\"\\s]+)"),]))},Rule { languages: &[ids::Roff, ], pattern: Some(Pattern::Positive("^\\.(?:[A-Za-z]{2}(?:\\s|$)|\\\\\")"))},]),
        (".yml", &[Rule { languages: &[ids::MiniYAML, ], pattern: Some(Pattern::Positive("^\\t+.*?[^\\s:].*?:"))},Rule { languages: &[ids::OASv2_yaml, ], pattern: Some(Pattern::Positive("swagger:\\s?'?\"?2.[0-9.]+'?\"?"))},Rule { languages: &[ids::OASv3_yaml, ], pattern: Some(Pattern::Positive("openapi:\\s?'?\"?3.[0-9.]+'?\"?"))},Rule { languages: &[ids::YAML, ], pattern: None},]),
        (".1in", &[Rule { languages: &[ids::Roff_Manpage, ], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*Dd +(?:[^\"\\s]+|\"[^\"]+\")"),Pattern::Positive("^[.'][ \\t]*Dt +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*Sh +(?:[^\"\\s]|\"[^\"]+\")"),]))},Rule { languages: &[ids::Roff_Manpage, ], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*TH +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*SH +(?:[^\"\\s]+|\"[^\"\\s]+)"),]))},Rule { languages: &[ids::Roff, ], pattern: None},]),
        (".txt", &[Rule { languages: &[ids::Vim_Help_File, ], pattern: Some(Pattern::Positive("(?:(?:^|[ \\t])(?:vi|Vi(?=m))(?:m[<=>]?[0-9]+|m)?|[ \\t]ex)(?=:(?=[ \\t]*set?[ \\t][^\\r\\n:]+:)|:(?![ \\t]*set?[ \\t]))(?:(?:[ \\t]*:[ \\t]*|[ \\t])\\w*(?:[ \\t]*=(?:[^\\\\\\s]|\\\\.)*)?)*[ \\t:](?:filetype|ft|syntax)[ \\t]*=(help)(?=$|\\s|:)"))},Rule { languages: &[ids::Hosts_File, ], pattern: Some(Pattern::Positive("(?xi) ^\n\n# IPv4 address\n(?<ipv4>\n  (?!\\.)\n  (?:\\.?\n    (?: 25[0-5]  # 250-255\n    |   2[0-4]\\d # 200-249\n    |   1\\d\\d    # 100-199\n    |   [1-9]?\\d # 0-99\n    )\\b\n){4})\n\n# CIDR notation: /[0-32]\n(?<cidr>/(3[0-2]|[12]?\\d)\\b)?\n\n# Domains list\n(?<domains>\n  [ \\t]+\n  \\w[-\\w]* (?:\\.\\w[-\\w]*)*\n  (?<!-)\\b\n)*+\n\n(?=$|\\s)"))},Rule { languages: &[ids::Adblock_Filter_List, ], pattern: Some(Pattern::Positive("(?x)\\A\n\\[\n(?<version>\n  (?:\n    [Aa]d[Bb]lock\n    (?:[ \\t][Pp]lus)?\n    |\n    u[Bb]lock\n    (?:[ \\t][Oo]rigin)?\n    |\n    [Aa]d[Gg]uard\n  )\n  (?:[ \\t] \\d+(?:\\.\\d+)*+)?\n)\n(?:\n  [ \\t]?;[ \\t]?\n  \\g<version>\n)*+\n\\]"))},Rule { languages: &[ids::Text, ], pattern: None},]),
        (".gts", &[Rule { languages: &[ids::Gerber_Image, ], pattern: Some(Pattern::Positive("^G0."))},Rule { languages: &[ids::Glimmer_TS, ], pattern: Some(Pattern::Negative("^G0."))},]),
        (".st", &[Rule { languages: &[ids::StringTemplate, ], pattern: Some(Pattern::Positive("\\$\\w+[($]|(.)!\\s*.+?\\s*!\\1|<!\\s*.+?\\s*!>|\\[!\\s*.+?\\s*!\\]|\\{!\\s*.+?\\s*!\\}"))},Rule { languages: &[ids::Smalltalk, ], pattern: Some(Pattern::Positive("\\A\\s*[\\[{(^\"'\\w#]|[a-zA-Z_]\\w*\\s*:=\\s*[a-zA-Z_]\\w*|class\\s*>>\\s*[a-zA-Z_]\\w*|^[a-zA-Z_]\\w*\\s+[a-zA-Z_]\\w*:|^Class\\s*\\{|if(?:True|False):\\s*\\["))},]),
        (".lsp", &[Rule { languages: &[ids::Common_Lisp, ], pattern: Some(Pattern::Positive("^\\s*\\((?i:defun|in-package|defpackage) "))},Rule { languages: &[ids::NewLisp, ], pattern: Some(Pattern::Positive("^\\s*\\(define "))},]),
        (".1m", &[Rule { languages: &[ids::Roff_Manpage, ], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*Dd +(?:[^\"\\s]+|\"[^\"]+\")"),Pattern::Positive("^[.'][ \\t]*Dt +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*Sh +(?:[^\"\\s]|\"[^\"]+\")"),]))},Rule { languages: &[ids::Roff_Manpage, ], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*TH +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*SH +(?:[^\"\\s]+|\"[^\"\\s]+)"),]))},Rule { languages: &[ids::Roff, ], pattern: None},]),
        (".tlv", &[Rule { languages: &[ids::TL_Verilog, ], pattern: Some(Pattern::Positive("^\\\\.{0,10}TLV_version"))},]),
        (".mod", &[Rule { languages: &[ids::XML, ], pattern: Some(Pattern::Positive("<!ENTITY "))},Rule { languages: &[ids::NMODL, ], pattern: Some(Pattern::Positive("\\b(NEURON|INITIAL|UNITS)\\b"))},Rule { languages: &[ids::Modula_2, ], pattern: Some(Pattern::Positive("^\\s*(?i:MODULE|END) [\\w\\.]+;"))},Rule { languages: &[ids::Linux_Kernel_Module, ids::AMPL, ], pattern: None},]),
        (".html", &[Rule { languages: &[ids::Ecmarkup, ], pattern: Some(Pattern::Positive("<emu-(?:alg|annex|biblio|clause|eqn|example|figure|gann|gmod|gprose|grammar|intro|not-ref|note|nt|prodref|production|rhs|table|t|xref)(?:$|\\s|>)"))},Rule { languages: &[ids::HTML, ], pattern: None},]),
        (".3m", &[Rule { languages: &[ids::Roff_Manpage, ], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*Dd +(?:[^\"\\s]+|\"[^\"]+\")"),Pattern::Positive("^[.'][ \\t]*Dt +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*Sh +(?:[^\"\\s]|\"[^\"]+\")"),]))},Rule { languages: &[ids::Roff_Manpage, ], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*TH +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*SH +(?:[^\"\\s]+|\"[^\"\\s]+)"),]))},Rule { languages: &[ids::Roff, ], pattern: None},]),
        (".ex", &[Rule { languages: &[ids::Elixir, ], pattern: Some(Pattern::Or(&[Pattern::Positive("^\\s*@moduledoc\\s"),Pattern::Positive("^\\s*(?:cond|import|quote|unless)\\s"),Pattern::Positive("^\\s*def(?:exception|impl|macro|module|protocol)[(\\s]"),]))},Rule { languages: &[ids::Euphoria, ], pattern: Some(Pattern::Or(&[Pattern::Positive("^\\s*namespace\\s"),Pattern::Positive("^\\s*(?:public\\s+)?include\\s"),Pattern::Positive("^\\s*(?:(?:public|export|global)\\s+)?(?:atom|constant|enum|function|integer|object|procedure|sequence|type)\\s"),]))},]),
        (".toc", &[Rule { languages: &[ids::World_of_Warcraft_Addon_Data, ], pattern: Some(Pattern::Positive("^## |@no-lib-strip@"))},Rule { languages: &[ids::TeX, ], pattern: Some(Pattern::Positive("^\\\\(contentsline|defcounter|beamer|boolfalse)"))},]),
        (".mc", &[Rule { languages: &[ids::Win32_Message_File, ], pattern: Some(Pattern::Positive("(?i)^[ \\t]*(?>\\/\\*\\s*)?MessageId=|^\\.$"))},Rule { languages: &[ids::M4, ], pattern: Some(Pattern::Positive("^dnl|^divert\\((?:-?\\d+)?\\)|^\\w+\\(`[^\\r\\n]*?'[),]"))},Rule { languages: &[ids::Monkey_C, ], pattern: Some(Pattern::Positive("\\b(?:using|module|function|class|var)\\s+\\w"))},]),
        (".n", &[Rule { languages: &[ids::Roff, ], pattern: Some(Pattern::Positive("^[.']"))},Rule { languages: &[ids::Nemerle, ], pattern: Some(Pattern::Positive("^(module|namespace|using)\\s"))},]),
        (".lisp", &[Rule { languages: &[ids::Common_Lisp, ], pattern: Some(Pattern::Positive("^\\s*\\((?i:defun|in-package|defpackage) "))},Rule { languages: &[ids::NewLisp, ], pattern: Some(Pattern::Positive("^\\s*\\(define "))},]),
        (".es", &[Rule { languages: &[ids::Erlang, ], pattern: Some(Pattern::Positive("^\\s*(?:%%|main\\s*\\(.*?\\)\\s*->)"))},Rule { languages: &[ids::JavaScript, ], pattern: Some(Pattern::Positive("\\/\\/|[\"']use strict[\"']|export\\s+default\\s|\\/\\*(?:.|[\\r\\n])*?\\*\\/"))},]),
        (".pro", &[Rule { languages: &[ids::Proguard, ], pattern: Some(Pattern::Positive("^-(include\\b.*\\.pro$|keep\\b|keepclassmembers\\b|keepattributes\\b)"))},Rule { languages: &[ids::Prolog, ], pattern: Some(Pattern::Positive("^[^\\[#]+:-"))},Rule { languages: &[ids::INI, ], pattern: Some(Pattern::Positive("last_client="))},Rule { languages: &[ids::QMake, ], pattern: Some(Pattern::And(&[Pattern::Positive("HEADERS"),Pattern::Positive("SOURCES"),]))},Rule { languages: &[ids::IDL, ], pattern: Some(Pattern::Positive("^\\s*(?i:function|pro|compile_opt) \\w[ \\w,:]*$"))},]),
        (".g", &[Rule { languages: &[ids::GAP, ], pattern: Some(Pattern::Positive("\\s*(Declare|BindGlobal|KeyDependentOperation|Install(Method|GlobalFunction)|SetPackageInfo)"))},Rule { languages: &[ids::G_code, ], pattern: Some(Pattern::Positive("^[MG][0-9]+(?:\\r?\\n|\\r)"))},]),
        (".csc", &[Rule { languages: &[ids::GSC, ], pattern: Some(Pattern::Or(&[Pattern::Positive("^\\s*#\\s*(?:using|insert|include|define|namespace)[ \\t]+\\w"),Pattern::Positive("^\\s*(?>(?:autoexec|private)\\s+){0,2}function\\s+(?>(?:autoexec|private)\\s+){0,2}\\w+\\s*\\("),Pattern::Positive("\\b(?:level|self)[ \\t]+thread[ \\t]+(?:\\[\\[[ \\t]*(?>\\w+\\.)*\\w+[ \\t]*\\]\\]|\\w+)[ \\t]*\\([^\\r\\n\\)]*\\)[ \\t]*;"),Pattern::Positive("^[ \\t]*#[ \\t]*(?:precache|using_animtree)[ \\t]*\\("),]))},]),
        (".nr", &[Rule { languages: &[ids::Roff, ], pattern: Some(Pattern::Positive("^\\."))},Rule { languages: &[ids::Noir, ], pattern: None},]),
        (".pm", &[Rule { languages: &[ids::Perl, ], pattern: Some(Pattern::And(&[Pattern::Negative("^\\s*use\\s+v6\\b"),Pattern::Or(&[Pattern::Positive("\\buse\\s+(?:strict\\b|v?5\\b)"),Pattern::Positive("^\\s*use\\s+(?:constant|overload)\\b"),Pattern::Positive("^\\s*(?:\\*|(?:our\\s*)?@)EXPORT\\s*="),Pattern::Positive("^\\s*package\\s+[^\\W\\d]\\w*(?:::\\w+)*\\s*(?:[;{]|\\sv?\\d)"),Pattern::Positive("[\\s$][^\\W\\d]\\w*(?::\\w+)*->[a-zA-Z_\\[({]"),]),]))},Rule { languages: &[ids::Raku, ], pattern: Some(Pattern::Positive("^\\s*(?:use\\s+v6\\b|\\bmodule\\b|\\b(?:my\\s+)?class\\b)"))},Rule { languages: &[ids::X_PixMap, ], pattern: Some(Pattern::Positive("^\\s*\\/\\* XPM \\*\\/"))},]),
        (".m", &[Rule { languages: &[ids::Objective_C, ], pattern: Some(Pattern::Positive("^\\s*(@(interface|class|protocol|property|end|synchronised|selector|implementation)\\b|#import\\s+.+\\.h[\">])"))},Rule { languages: &[ids::Mercury, ], pattern: Some(Pattern::Positive(":- module"))},Rule { languages: &[ids::MUF, ], pattern: Some(Pattern::Positive("^: "))},Rule { languages: &[ids::M, ], pattern: Some(Pattern::Positive("^\\s*;"))},Rule { languages: &[ids::Mathematica, ], pattern: Some(Pattern::And(&[Pattern::Positive("\\(\\*"),Pattern::Positive("\\*\\)$"),]))},Rule { languages: &[ids::MATLAB, ], pattern: Some(Pattern::Positive("^\\s*%"))},Rule { languages: &[ids::Limbo, ], pattern: Some(Pattern::Positive("^\\w+\\s*:\\s*module\\s*\\{"))},]),
        (".re", &[Rule { languages: &[ids::Reason, ], pattern: Some(Pattern::Or(&[Pattern::Positive("^\\s*module\\s+type\\s"),Pattern::Positive("^\\s*(?:include|open)\\s+\\w+\\s*;\\s*$"),Pattern::Positive("^\\s*let\\s+(?:module\\s\\w+\\s*=\\s*\\{|\\w+:\\s+.*=.*;\\s*$)"),]))},Rule { languages: &[ids::Cpp, ], pattern: Some(Pattern::Or(&[Pattern::Positive("^\\s*#(?:(?:if|ifdef|define|pragma)\\s+\\w|\\s*include\\s+<[^>]+>)"),Pattern::Positive("^\\s*template\\s*<"),]))},]),
        (".asm", &[Rule { languages: &[ids::Motorola_68K_Assembly, ], pattern: Some(Pattern::Or(&[Pattern::Positive("(?im)\\bmoveq(?:\\.l)?\\s+#(?:\\$-?[0-9a-f]{1,3}|%[0-1]{1,8}|-?[0-9]{1,3}),\\s*d[0-7]\\b"),Pattern::Positive("(?im)^\\s*move(?:\\.[bwl])?\\s+(?:sr|usp),\\s*[^\\s]+"),Pattern::Positive("(?im)^\\s*move\\.[bwl]\\s+.*\\b[ad]\\d"),Pattern::Positive("(?im)^\\s*movem\\.[bwl]\\b"),Pattern::Positive("(?im)^\\s*move[mp](?:\\.[wl])?\\b"),Pattern::Positive("(?im)^\\s*btst\\b"),Pattern::Positive("(?im)^\\s*dbra\\b"),]))},]),
        (".7", &[Rule { languages: &[ids::Roff_Manpage, ], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*Dd +(?:[^\"\\s]+|\"[^\"]+\")"),Pattern::Positive("^[.'][ \\t]*Dt +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*Sh +(?:[^\"\\s]|\"[^\"]+\")"),]))},Rule { languages: &[ids::Roff_Manpage, ], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*TH +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*SH +(?:[^\"\\s]+|\"[^\"\\s]+)"),]))},Rule { languages: &[ids::Roff, ], pattern: Some(Pattern::Positive("^\\.(?:[A-Za-z]{2}(?:\\s|$)|\\\\\")"))},]),
        (".inc", &[Rule { languages: &[ids::Motorola_68K_Assembly, ], pattern: Some(Pattern::Or(&[Pattern::Positive("(?im)\\bmoveq(?:\\.l)?\\s+#(?:\\$-?[0-9a-f]{1,3}|%[0-1]{1,8}|-?[0-9]{1,3}),\\s*d[0-7]\\b"),Pattern::Positive("(?im)^\\s*move(?:\\.[bwl])?\\s+(?:sr|usp),\\s*[^\\s]+"),Pattern::Positive("(?im)^\\s*move\\.[bwl]\\s+.*\\b[ad]\\d"),Pattern::Positive("(?im)^\\s*movem\\.[bwl]\\b"),Pattern::Positive("(?im)^\\s*move[mp](?:\\.[wl])?\\b"),Pattern::Positive("(?im)^\\s*btst\\b"),Pattern::Positive("(?im)^\\s*dbra\\b"),]))},Rule { languages: &[ids::PHP, ], pattern: Some(Pattern::Positive("^<\\?(?:php)?"))},Rule { languages: &[ids::SourcePawn, ], pattern: Some(Pattern::Or(&[Pattern::Positive("^public\\s+(?:SharedPlugin(?:\\s+|:)__pl_\\w+\\s*=(?:\\s*\\{)?|(?:void\\s+)?__pl_\\w+_SetNTVOptional\\(\\)(?:\\s*\\{)?)"),Pattern::Positive("^methodmap\\s+\\w+\\s+<\\s+\\w+"),Pattern::Positive("^\\s*MarkNativeAsOptional\\s*\\("),]))},Rule { languages: &[ids::NASL, ], pattern: Some(Pattern::Or(&[Pattern::Positive("^\\s*include\\s*\\(\\s*(?:\"|')[\\\\/\\w\\-\\.:\\s]+\\.(?:nasl|inc)\\s*(?:\"|')\\s*\\)\\s*;"),Pattern::Positive("^\\s*(?:global|local)_var\\s+(?:\\w+(?:\\s*=\\s*[\\w\\-\"']+)?\\s*)(?:,\\s*\\w+(?:\\s*=\\s*[\\w\\-\"']+)?\\s*)*+\\s*;"),Pattern::Positive("^\\s*namespace\\s+\\w+\\s*\\{"),Pattern::Positive("^\\s*object\\s+\\w+\\s*(?:extends\\s+\\w+(?:::\\w+)?)?\\s*\\{"),Pattern::Positive("^\\s*(?:public\\s+|private\\s+|\\s*)function\\s+\\w+\\s*\\([\\w\\s,]*\\)\\s*\\{"),]))},Rule { languages: &[ids::POV_Ray_SDL, ], pattern: Some(Pattern::Positive("^\\s*#(declare|local|macro|while)\\s"))},Rule { languages: &[ids::Pascal, ], pattern: Some(Pattern::Or(&[Pattern::Positive("(?i:^\\s*\\{\\$(?:mode|ifdef|undef|define)[ ]+[a-z0-9_]+\\})"),Pattern::Positive("^\\s*end[.;]\\s*$"),]))},Rule { languages: &[ids::BitBake, ], pattern: Some(Pattern::Positive("^inherit(\\s+[\\w.-]+)+\\s*$"))},]),
        (".csl", &[Rule { languages: &[ids::XML, ], pattern: Some(Pattern::Positive("(?i:^\\s*(<\\?xml|xmlns))"))},Rule { languages: &[ids::Kusto, ], pattern: Some(Pattern::Positive("(^\\|\\s*(where|extend|project|limit|summarize))|(^\\.\\w+)"))},]),
        (".f", &[Rule { languages: &[ids::Forth, ], pattern: Some(Pattern::Positive("^: "))},Rule { languages: &[ids::Filebench_WML, ], pattern: Some(Pattern::Positive("flowop"))},Rule { languages: &[ids::Fortran, ], pattern: Some(Pattern::Positive("^(?i:[c*][^abd-z]|      (subroutine|program|end|data)\\s|\\s*!)"))},]),
        (".bf", &[Rule { languages: &[ids::Beef, ], pattern: Some(Pattern::Positive("(?-m)^\\s*using\\s+(System|Beefy)(\\.(.*))?;\\s*$"))},Rule { languages: &[ids::HyPhy, ], pattern: Some(Pattern::Or(&[Pattern::Positive("(?-m)^\\s*#include\\s+\".*\";\\s*$"),Pattern::Positive("\\sfprintf\\s*\\("),]))},Rule { languages: &[ids::Brainfuck, ], pattern: Some(Pattern::Positive("(>\\+>|>\\+<)"))},]),
        (".resource", &[Rule { languages: &[ids::RobotFramework, ], pattern: Some(Pattern::Or(&[Pattern::Positive("^\\*{3} (Settings|Variables|Keywords) \\*{3}$"),]))},]),
        (".hh", &[Rule { languages: &[ids::Hack, ], pattern: Some(Pattern::Positive("<\\?hh"))},]),
        (".php", &[Rule { languages: &[ids::Hack, ], pattern: Some(Pattern::Positive("<\\?hh"))},Rule { languages: &[ids::PHP, ], pattern: Some(Pattern::Positive("<\\?[^h]"))},]),
        (".v", &[Rule { languages: &[ids::Coq, ], pattern: Some(Pattern::Positive("(?:^|\\s)(?:Proof|Qed)\\.(?:$|\\s)|(?:^|\\s)Require[ \\t]+(Import|Export)\\s"))},Rule { languages: &[ids::Verilog, ], pattern: Some(Pattern::Positive("^[ \\t]*module\\s+[^\\s()]+\\s+\\#?\\(|^[ \\t]*`(?:define|ifdef|ifndef|include|timescale)|^[ \\t]*always[ \\t]+@|^[ \\t]*initial[ \\t]+(begin|@)"))},Rule { languages: &[ids::V, ], pattern: Some(Pattern::Positive("\\$(?:if|else)[ \\t]|^[ \\t]*fn\\s+[^\\s()]+\\(.*?\\).*?\\{|^[ \\t]*for\\s*\\{"))},]),
        (".3x", &[Rule { languages: &[ids::Roff_Manpage, ], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*Dd +(?:[^\"\\s]+|\"[^\"]+\")"),Pattern::Positive("^[.'][ \\t]*Dt +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*Sh +(?:[^\"\\s]|\"[^\"]+\")"),]))},Rule { languages: &[ids::Roff_Manpage, ], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*TH +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*SH +(?:[^\"\\s]+|\"[^\"\\s]+)"),]))},Rule { languages: &[ids::Roff, ], pattern: None},]),
        (".star", &[Rule { languages: &[ids::STAR, ], pattern: Some(Pattern::Positive("^loop_\\s*$"))},Rule { languages: &[ids::Starlark, ], pattern: None},]),
        (".l", &[Rule { languages: &[ids::Common_Lisp, ], pattern: Some(Pattern::Positive("\\(def(un|macro)\\s"))},Rule { languages: &[ids::Lex, ], pattern: Some(Pattern::Positive("^(%[%{}]xs|<.*>)"))},Rule { languages: &[ids::Roff, ], pattern: Some(Pattern::Positive("^\\.[A-Za-z]{2}(\\s|$)"))},Rule { languages: &[ids::PicoLisp, ], pattern: Some(Pattern::Positive("^\\((de|class|rel|code|data|must)\\s"))},]),
        (".pp", &[Rule { languages: &[ids::Pascal, ], pattern: Some(Pattern::Positive("^\\s*end[.;]"))},Rule { languages: &[ids::Puppet, ], pattern: Some(Pattern::Positive("^\\s+\\w+\\s+=>\\s"))},]),
        (".1", &[Rule { languages: &[ids::Roff_Manpage, ], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*Dd +(?:[^\"\\s]+|\"[^\"]+\")"),Pattern::Positive("^[.'][ \\t]*Dt +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*Sh +(?:[^\"\\s]|\"[^\"]+\")"),]))},Rule { languages: &[ids::Roff_Manpage, ], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*TH +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*SH +(?:[^\"\\s]+|\"[^\"\\s]+)"),]))},Rule { languages: &[ids::Roff, ], pattern: Some(Pattern::Positive("^\\.(?:[A-Za-z]{2}(?:\\s|$)|\\\\\")"))},]),
        (".m4", &[Rule { languages: &[ids::M4Sugar, ], pattern: Some(Pattern::Or(&[Pattern::Positive("AC_DEFUN|AC_PREREQ|AC_INIT"),Pattern::Positive("^_?m4_"),]))},Rule { languages: &[ids::M4, ], pattern: None},]),
        (".dsp", &[Rule { languages: &[ids::Microsoft_Developer_Studio_Project, ], pattern: Some(Pattern::Positive("# Microsoft Developer Studio Generated Build File"))},Rule { languages: &[ids::Faust, ], pattern: Some(Pattern::Positive("\\bprocess\\s*[(=]|\\b(library|import)\\s*\\(\\s*\"|\\bdeclare\\s+(name|version|author|copyright|license)\\s+\""))},]),
        (".rno", &[Rule { languages: &[ids::RUNOFF, ], pattern: Some(Pattern::Positive("(?i:^\\.!|^\\f|\\f$|^\\.end lit(?:eral)?\\b|^\\.[a-zA-Z].*?;\\.[a-zA-Z](?:[; \\t])|\\^\\*[^\\s*][^*]*\\\\\\*(?=$|\\s)|^\\.c;[ \\t]*\\w+)"))},Rule { languages: &[ids::Roff, ], pattern: Some(Pattern::Positive("^\\.\\\\\" "))},]),
        (".ncl", &[Rule { languages: &[ids::XML, ], pattern: Some(Pattern::Positive("^\\s*<\\?xml\\s+version"))},Rule { languages: &[ids::Gerber_Image, ], pattern: Some(Pattern::Positive("^[DGMT][0-9]{2}\\*(?:\\r?\\n|\\r)"))},Rule { languages: &[ids::Text, ], pattern: Some(Pattern::Positive("THE_TITLE"))},]),
        (".gs", &[Rule { languages: &[ids::GLSL, ], pattern: Some(Pattern::Positive("^#version\\s+[0-9]+\\b"))},Rule { languages: &[ids::Gosu, ], pattern: Some(Pattern::Positive("^uses (java|gw)\\."))},Rule { languages: &[ids::Genie, ], pattern: Some(Pattern::Positive("^\\[indent=[0-9]+\\]"))},]),
        (".sw", &[Rule { languages: &[ids::Sway, ], pattern: Some(Pattern::Positive("^\\s*(?:(?:abi|dep|fn|impl|mod|pub|trait)\\s|#\\[)"))},Rule { languages: &[ids::XML, ], pattern: Some(Pattern::Positive("^\\s*<\\?xml\\s+version"))},]),
        (".3qt", &[Rule { languages: &[ids::Roff_Manpage, ], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*Dd +(?:[^\"\\s]+|\"[^\"]+\")"),Pattern::Positive("^[.'][ \\t]*Dt +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*Sh +(?:[^\"\\s]|\"[^\"]+\")"),]))},Rule { languages: &[ids::Roff_Manpage, ], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*TH +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*SH +(?:[^\"\\s]+|\"[^\"\\s]+)"),]))},Rule { languages: &[ids::Roff, ], pattern: None},]),
        (".sc", &[Rule { languages: &[ids::SuperCollider, ], pattern: Some(Pattern::Positive("(?i:\\^(this|super)\\.|^\\s*~\\w+\\s*=\\.)"))},Rule { languages: &[ids::Scala, ], pattern: Some(Pattern::Positive("(^\\s*import (scala|java)\\.|^\\s*class\\b)"))},]),
        (".d", &[Rule { languages: &[ids::D, ], pattern: Some(Pattern::Positive("^module\\s+[\\w.]*\\s*;|import\\s+[\\w\\s,.:]*;|\\w+\\s+\\w+\\s*\\(.*\\)(?:\\(.*\\))?\\s*\\{[^}]*\\}|unittest\\s*(?:\\(.*\\))?\\s*\\{[^}]*\\}"))},Rule { languages: &[ids::DTrace, ], pattern: Some(Pattern::Positive("^(\\w+:\\w*:\\w*:\\w*|BEGIN|END|provider\\s+|(tick|profile)-\\w+\\s+\\{[^}]*\\}|#pragma\\s+D\\s+(option|attributes|depends_on)\\s|#pragma\\s+ident\\s)"))},Rule { languages: &[ids::Makefile, ], pattern: Some(Pattern::Positive("([\\/\\\\].*:\\s+.*\\s\\\\$|: \\\\$|^[ %]:|^[\\w\\s\\/\\\\.]+\\w+\\.\\w+\\s*:\\s+[\\w\\s\\/\\\\.]+\\w+\\.\\w+)"))},]),
        (".qs", &[Rule { languages: &[ids::QSharp, ], pattern: Some(Pattern::Positive("^((\\/{2,3})?\\s*(namespace|operation)\\b)"))},Rule { languages: &[ids::Qt_Script, ], pattern: Some(Pattern::Positive("(\\w+\\.prototype\\.\\w+|===|\\bvar\\b)"))},]),
        (".ftl", &[Rule { languages: &[ids::FreeMarker, ], pattern: Some(Pattern::Positive("^(?:<|[a-zA-Z-][a-zA-Z0-9_-]+[ \\t]+\\w)|\\$\\{\\w+[^\\r\\n]*?\\}|^[ \\t]*(?:<#--.*?-->|<#([a-z]+)(?=\\s|>)[^>]*>.*?</#\\1>|\\[#--.*?--\\]|\\[#([a-z]+)(?=\\s|\\])[^\\]]*\\].*?\\[#\\2\\])"))},Rule { languages: &[ids::Fluent, ], pattern: Some(Pattern::Positive("^-?[a-zA-Z][a-zA-Z0-9_-]* *=|\\{\\$-?[a-zA-Z][-\\w]*(?:\\.[a-zA-Z][-\\w]*)?\\}"))},]),
        (".md", &[Rule { languages: &[ids::Markdown, ], pattern: Some(Pattern::Or(&[Pattern::Positive("(^[-A-Za-z0-9=#!\\*\\[|>])|<\\/"),Pattern::Positive("\\A\\z"),]))},Rule { languages: &[ids::GCC_Machine_Description, ], pattern: Some(Pattern::Positive("^(;;|\\(define_)"))},Rule { languages: &[ids::Markdown, ], pattern: None},]),
        (".gsh", &[Rule { languages: &[ids::GSC, ], pattern: Some(Pattern::Or(&[Pattern::Positive("^\\s*#\\s*(?:using|insert|include|define|namespace)[ \\t]+\\w"),Pattern::Positive("^\\s*(?>(?:autoexec|private)\\s+){0,2}function\\s+(?>(?:autoexec|private)\\s+){0,2}\\w+\\s*\\("),Pattern::Positive("\\b(?:level|self)[ \\t]+thread[ \\t]+(?:\\[\\[[ \\t]*(?>\\w+\\.)*\\w+[ \\t]*\\]\\]|\\w+)[ \\t]*\\([^\\r\\n\\)]*\\)[ \\t]*;"),Pattern::Positive("^[ \\t]*#[ \\t]*(?:precache|using_animtree)[ \\t]*\\("),]))},]),
        (".gml", &[Rule { languages: &[ids::XML, ], pattern: Some(Pattern::Positive("(?i:^\\s*(<\\?xml|xmlns))"))},Rule { languages: &[ids::Graph_Modeling_Language, ], pattern: Some(Pattern::Positive("(?i:^\\s*(graph|node)\\s+\\[$)"))},Rule { languages: &[ids::Gerber_Image, ], pattern: Some(Pattern::Positive("^[DGMT][0-9]{2}\\*$"))},Rule { languages: &[ids::Game_Maker_Language, ], pattern: None},]),
        (".cls", &[Rule { languages: &[ids::Visual_Basic_6_0, ], pattern: Some(Pattern::And(&[Pattern::Positive("^[ ]*VERSION [0-9]\\.[0-9] CLASS"),Pattern::Positive("^\\s*BEGIN(?:\\r?\\n|\\r)\\s*MultiUse\\s*=.*(?:\\r?\\n|\\r)\\s*Persistable\\s*="),]))},Rule { languages: &[ids::VBA, ], pattern: Some(Pattern::Positive("^[ ]*VERSION [0-9]\\.[0-9] CLASS"))},Rule { languages: &[ids::TeX, ], pattern: Some(Pattern::Positive("^\\s*\\\\(?:NeedsTeXFormat|ProvidesClass)\\{"))},Rule { languages: &[ids::ObjectScript, ], pattern: Some(Pattern::Positive("^Class\\s"))},]),
        (".i", &[Rule { languages: &[ids::Motorola_68K_Assembly, ], pattern: Some(Pattern::Or(&[Pattern::Positive("(?im)\\bmoveq(?:\\.l)?\\s+#(?:\\$-?[0-9a-f]{1,3}|%[0-1]{1,8}|-?[0-9]{1,3}),\\s*d[0-7]\\b"),Pattern::Positive("(?im)^\\s*move(?:\\.[bwl])?\\s+(?:sr|usp),\\s*[^\\s]+"),Pattern::Positive("(?im)^\\s*move\\.[bwl]\\s+.*\\b[ad]\\d"),Pattern::Positive("(?im)^\\s*movem\\.[bwl]\\b"),Pattern::Positive("(?im)^\\s*move[mp](?:\\.[wl])?\\b"),Pattern::Positive("(?im)^\\s*btst\\b"),Pattern::Positive("(?im)^\\s*dbra\\b"),]))},Rule { languages: &[ids::SWIG, ], pattern: Some(Pattern::Positive("^[ \\t]*%[a-z_]+\\b|^%[{}]$"))},]),
        (".tst", &[Rule { languages: &[ids::GAP, ], pattern: Some(Pattern::Positive("gap> "))},Rule { languages: &[ids::Scilab, ], pattern: None},]),
        (".pl", &[Rule { languages: &[ids::Prolog, ], pattern: Some(Pattern::Positive("^[^#]*:-"))},Rule { languages: &[ids::Perl, ], pattern: Some(Pattern::And(&[Pattern::Negative("^\\s*use\\s+v6\\b"),Pattern::Or(&[Pattern::Positive("\\buse\\s+(?:strict\\b|v?5\\b)"),Pattern::Positive("^\\s*use\\s+(?:constant|overload)\\b"),Pattern::Positive("^\\s*(?:\\*|(?:our\\s*)?@)EXPORT\\s*="),Pattern::Positive("^\\s*package\\s+[^\\W\\d]\\w*(?:::\\w+)*\\s*(?:[;{]|\\sv?\\d)"),Pattern::Positive("[\\s$][^\\W\\d]\\w*(?::\\w+)*->[a-zA-Z_\\[({]"),]),]))},Rule { languages: &[ids::Raku, ], pattern: Some(Pattern::Positive("^\\s*(?:use\\s+v6\\b|\\bmodule\\b|\\b(?:my\\s+)?class\\b)"))},]),
        (".json", &[Rule { languages: &[ids::OASv2_json, ], pattern: Some(Pattern::Positive("\"swagger\":\\s?\"2.[0-9.]+\""))},Rule { languages: &[ids::OASv3_json, ], pattern: Some(Pattern::Positive("\"openapi\":\\s?\"3.[0-9.]+\""))},Rule { languages: &[ids::JSON, ], pattern: None},]),
        (".3pm", &[Rule { languages: &[ids::Roff_Manpage, ], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*Dd +(?:[^\"\\s]+|\"[^\"]+\")"),Pattern::Positive("^[.'][ \\t]*Dt +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*Sh +(?:[^\"\\s]|\"[^\"]+\")"),]))},Rule { languages: &[ids::Roff_Manpage, ], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*TH +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*SH +(?:[^\"\\s]+|\"[^\"\\s]+)"),]))},Rule { languages: &[ids::Roff, ], pattern: None},]),
        (".properties", &[Rule { languages: &[ids::INI, ], pattern: Some(Pattern::And(&[Pattern::Positive("^[^#!;][^=]*="),Pattern::Positive("^[;\\[]"),]))},Rule { languages: &[ids::Java_Properties, ], pattern: Some(Pattern::And(&[Pattern::Positive("^[^#!;][^=]*="),Pattern::Positive("^[#!]"),]))},Rule { languages: &[ids::INI, ], pattern: Some(Pattern::Positive("^[^#!;][^=]*="))},Rule { languages: &[ids::Java_Properties, ], pattern: Some(Pattern::Positive("^[^#!][^:]*:"))},]),
        (".tag", &[Rule { languages: &[ids::Java_Server_Pages, ], pattern: Some(Pattern::Positive("<%[@!=\\s]?\\s*(taglib|tag|include|attribute|variable)\\s"))},]),
        (".ml", &[Rule { languages: &[ids::OCaml, ], pattern: Some(Pattern::Positive("(^\\s*module)|let rec |match\\s+(\\S+\\s)+with"))},Rule { languages: &[ids::Standard_ML, ], pattern: Some(Pattern::Positive("=> |case\\s+(\\S+\\s)+of"))},]),
        (".p", &[Rule { languages: &[ids::Gnuplot, ], pattern: Some(Pattern::Or(&[Pattern::Positive("^s?plot\\b"),Pattern::Positive("^set\\s+(term|terminal|out|output|[xy]tics|[xy]label|[xy]range|style)\\b"),]))},Rule { languages: &[ids::OpenEdge_ABL, ], pattern: None},]),
        (".bas", &[Rule { languages: &[ids::B4X, ], pattern: Some(Pattern::Positive("\\A\\W{0,3}(?:.*(?:\\r?\\n|\\r)){0,9}B4(?:J|A|R|i)=true"))},Rule { languages: &[ids::FreeBasic, ], pattern: Some(Pattern::Positive("^[ \\t]*#(?i)(?:define|endif|endmacro|ifn?def|include|lang|macro)(?:$|\\s)"))},Rule { languages: &[ids::BASIC, ], pattern: Some(Pattern::Positive("\\A\\s*\\d"))},Rule { languages: &[ids::VBA, ], pattern: Some(Pattern::And(&[Pattern::Positive("^[ ]*Attribute VB_Name = "),Pattern::Or(&[Pattern::Positive("\\b(?:VBA|[vV]ba)(?:\\b|[0-9A-Z_])"),Pattern::Positive("^[ ]*(?:Public|Private)? Declare PtrSafe (?:Sub|Function)\\b"),Pattern::Positive("^[ ]*#If Win64\\b"),Pattern::Positive("^[ ]*(?:Dim|Const) [0-9a-zA-Z_]*[ ]*As Long(?:Ptr|Long)\\b"),Pattern::Positive("^[ ]*Option (?:Private Module|Compare (?:Database|Text|Binary))\\b"),Pattern::Positive("(?: |\\()(?:Access|Excel|Outlook|PowerPoint|Visio|Word|VBIDE)\\.\\w"),Pattern::Positive("\\b(?:(?:Active)?VBProjects?|VBComponents?|Application\\.(?:VBE|ScreenUpdating))\\b"),Pattern::Positive("\\b(?:ThisDrawing|AcadObject|Active(?:Explorer|Inspector|Window\\.Presentation|Presentation|Document)|Selection\\.(?:Find|Paragraphs))\\b"),Pattern::Positive("\\b(?:(?:This|Active)?Workbooks?|Worksheets?|Active(?:Sheet|Chart|Cell)|WorksheetFunction)\\b"),Pattern::Positive("\\b(?:Range\\(\".*|Cells\\([0-9a-zA-Z_]*, (?:[0-9a-zA-Z_]*|\"[a-zA-Z]{1,3}\"))\\)"),]),]))},Rule { languages: &[ids::Visual_Basic_6_0, ], pattern: Some(Pattern::Positive("^[ ]*Attribute VB_Name = "))},]),
    ],
};

